#/bin/bash
#
# MySQL SSH Tunnel Scripts
#
# This script will allow someone to use SSH tunneling into a remote MySQL
# instance based on a config file stored in their $HOME/.ssh/tunnel_configs.json
# file. It is not perfect but it's a time saver when you are jumping in and
# out of remote MySQL instances.
#
# Usage:
#
#   tunnel                  Show the available config items you have,
#   tunnel config_name      Establish an SSH tunnel into the relevant config
#   kill_tunnel             Kill existing tunnel on port 3307

TUNNEL_CONFIG="$HOME/.ssh/tunnel_configs.json"
AVAILABLE_CONFIGS=$(cat $TUNNEL_CONFIG | python -c "import json, sys; obj=json.load(sys.stdin); print '\n'.join(obj.keys())")

show_available_configs () {
    echo "Please select one of the following configs:"
    echo
    echo $AVAILABLE_CONFIGS | sed 's/ /\n/g'
}

kill_tunnel () {
    echo "Killing MySQL SSH tunnel on port 3307"

    SESSION=$(ps -fU root -C ssh | grep "ssh -2" | grep "3307" | awk '{print $2}')

    while [ ! -z $SESSION ]; do
        kill $SESSION
        SESSION=$(ps -fU root -C ssh | grep "ssh -2" | grep "3307" | awk '{print $2}')
    done

    echo "...done!"
}

tunnel () {
    if [ -z "$1" ]
    then
        show_available_configs
    else
        CONFIG=$1
        CONFIG_EXISTS=$(cat $TUNNEL_CONFIG | python -c "import json, sys; obj=json.load(sys.stdin); print bool(' '.join(dict(obj).get('$CONFIG', '')))")

        if [ $CONFIG_EXISTS == "True" ]
        then
            SSH_CONFIG=$(cat $TUNNEL_CONFIG | python -c "import json, sys; obj=json.load(sys.stdin); print obj['$CONFIG']['ssh_config']")
            USERNAME=$(cat $TUNNEL_CONFIG | python -c "import json, sys; obj=json.load(sys.stdin); print obj['$CONFIG']['username']")
            PASSWORD=$(cat $TUNNEL_CONFIG | python -c "import json, sys; obj=json.load(sys.stdin); print obj['$CONFIG']['password']")
            DATABASE=$(cat $TUNNEL_CONFIG | python -c "import json, sys; obj=json.load(sys.stdin); print obj['$CONFIG']['database']")

            kill_tunnel

            echo "Forwarding 127.0.0.1:3307 to $SSH_CONFIG:3306"
            ssh -2 -f -C -N $SSH_CONFIG -L 3307/127.0.0.1/3306
            echo "...done!"
            echo

            if [ -z $PASSWORD ]
            then
                echo "Connecting to $SSH_CONFIG MySQL as $USERNAME with no password on $DATABASE."
                mysql -u $USERNAME -h127.0.0.1 -P3307 $DATABASE
            else
                echo "Connecting to $SSH_CONFIG MySQL as $USERNAME on $DATABASE."
                mysql -u $USERNAME -p$PASSWORD -h127.0.0.1 -P3307 $DATABASE
            fi
        else
            show_available_configs
        fi
    fi
}
